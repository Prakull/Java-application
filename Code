import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.File;
import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Random;

public class DestinationHashGenerator {
    public static void main(String[] args) {
        if (args.length != 2) {
            System.out.println("Usage: java -jar DestinationHashGenerator.jar <RollNumber> <JSONFilePath>");
            return;
        }

        String rollNumber = args[0].toLowerCase();
        String jsonFilePath = args[1];

        try {
            // Step 2: Parse the JSON file
            File file = new File(jsonFilePath);
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode rootNode = objectMapper.readTree(file);

            // Step 3: Traverse JSON to find "destination"
            String destinationValue = findDestinationValue(rootNode);
            if (destinationValue == null) {
                System.out.println("Key 'destination' not found in the JSON file.");
                return;
            }

            // Step 4: Generate random 8-character alphanumeric string
            String randomString = generateRandomString(8);

            // Step 5: Generate MD5 hash
            String concatenatedString = rollNumber + destinationValue + randomString;
            String hash = generateMD5Hash(concatenatedString);

            // Step 6: Output result
            System.out.println(hash + ";" + randomString);
        } catch (IOException e) {
            System.err.println("Error reading JSON file: " + e.getMessage());
        } catch (NoSuchAlgorithmException e) {
            System.err.println("Error generating MD5 hash: " + e.getMessage());
        }
    }

    private static String findDestinationValue(JsonNode node) {
        if (node.isObject()) {
            for (JsonNode child : node) {
                if (child.isObject()) {
                    String result = findDestinationValue(child);
                    if (result != null) return result;
                }
            }
        } else if (node.isValueNode()) {
            if (node.has("destination")) {
                return node.get("destination").asText();
            }
        }
        return null;
    }

    private static String generateRandomString(int length) {
        String chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        StringBuilder sb = new StringBuilder(length);
        Random random = new Random();
        for (int i = 0; i < length; i++) {
            sb.append(chars.charAt(random.nextInt(chars.length())));
        }
        return sb.toString();
    }

    private static String generateMD5Hash(String input) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("MD5");
        byte[] digest = md.digest(input.getBytes());
        StringBuilder hexString = new StringBuilder();
        for (byte b : digest) {
            String hex = Integer.toHexString(0xff & b);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }
}
